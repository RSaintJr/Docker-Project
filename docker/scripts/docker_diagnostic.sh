
echo "üîç Diagn√≥stico do Sistema de Containers"
echo "======================================"

command_exists() {
    command -v "$1" >/dev/null 2>&1
}

echo "1. üê≥ Verificando Docker..."
if command_exists docker; then
    echo "‚úÖ Docker est√° instalado"
    docker --version
    
    if docker info >/dev/null 2>&1; then
        echo "‚úÖ Docker daemon est√° rodando"
    else
        echo "‚ùå Docker daemon n√£o est√° rodando"
        echo "üí° Execute: sudo service docker start"
        exit 1
    fi
else
    echo "‚ùå Docker n√£o est√° instalado"
    exit 1
fi

echo ""
echo "2. üêô Verificando Docker Compose..."
if command_exists docker-compose; then
    echo "‚úÖ Docker Compose est√° instalado"
    docker-compose --version
elif command_exists docker && docker compose version >/dev/null 2>&1; then
    echo "‚úÖ Docker Compose (plugin) est√° dispon√≠vel"
    docker compose version
else
    echo "‚ùå Docker Compose n√£o est√° dispon√≠vel"
    exit 1
fi

echo ""
echo "3. üìÅ Verificando arquivos necess√°rios..."
if [ -f "docker-compose.yml" ]; then
    echo "‚úÖ docker-compose.yml encontrado"
else
    echo "‚ùå docker-compose.yml n√£o encontrado"
    echo "üí° Certifique-se de estar no diret√≥rio correto do projeto"
    exit 1
fi

echo ""
echo "4. üìä Status atual dos containers..."
docker-compose ps

echo ""
echo "5. üîå Verificando portas ocupadas..."
echo "Porta 8000 (FastAPI):"
if command_exists netstat; then
    netstat -tlnp | grep :8000 || echo "Porta 8000 livre"
elif command_exists ss; then
    ss -tlnp | grep :8000 || echo "Porta 8000 livre"
else
    echo "Comandos netstat/ss n√£o dispon√≠veis"
fi

echo ""
echo "Porta 5432 (PostgreSQL):"
if command_exists netstat; then
    netstat -tlnp | grep :5432 || echo "Porta 5432 livre"
elif command_exists ss; then
    ss -tlnp | grep :5432 || echo "Porta 5432 livre"
fi

echo ""
echo "6. üìã Logs dos containers (√∫ltimas 20 linhas)..."
echo "=================================="

CONTAINERS=$(docker-compose ps --services 2>/dev/null)

if [ -n "$CONTAINERS" ]; then
    for container in $CONTAINERS; do
        echo ""
        echo "--- Logs do $container ---"
        docker-compose logs --tail=20 $container 2>/dev/null || echo "Sem logs dispon√≠veis"
    done
else
    echo "Nenhum container rodando"
fi

echo ""
echo "7. üåê Testando conectividade..."
echo "================================"

if docker-compose ps | grep -q "Up.*8000"; then
    echo "Container do backend est√° UP na porta 8000"
    
    echo "Testando conex√£o interna ao backend..."
    
    if docker-compose exec backend wget -q --spider http://localhost:8000 2>/dev/null; then
        echo "‚úÖ Backend responde internamente (wget)"
    elif docker-compose exec backend python -c "import urllib.request; urllib.request.urlopen('http://localhost:8000')" 2>/dev/null; then
        echo "‚úÖ Backend responde internamente (python)"
    elif docker-compose exec backend nc -z localhost 8000 2>/dev/null; then
        echo "‚úÖ Backend porta 8000 est√° aberta internamente (netcat)"
    else
        echo "‚ùå Backend n√£o responde internamente (testado wget, python, netcat)"
    fi
    
    echo "Testando conex√£o externa ao backend..."
    if command -v curl >/dev/null 2>&1; then
        if curl -s --max-time 5 http://localhost:8000 >/dev/null 2>&1; then
            echo "‚úÖ Backend responde externamente (curl)"
        else
            echo "‚ùå Backend n√£o responde externamente (curl)"
        fi
    elif command -v wget >/dev/null 2>&1; then
        if wget -q --timeout=5 --tries=1 --spider http://localhost:8000 2>/dev/null; then
            echo "‚úÖ Backend responde externamente (wget)"
        else
            echo "‚ùå Backend n√£o responde externamente (wget)"
        fi
    elif command -v nc >/dev/null 2>&1; then
        if nc -z localhost 8000 2>/dev/null; then
            echo "‚úÖ Porta 8000 est√° aberta externamente (netcat)"
        else
            echo "‚ùå Porta 8000 n√£o est√° acess√≠vel externamente (netcat)"
        fi
    else
        echo "‚ö†Ô∏è Nenhum comando de teste dispon√≠vel (curl, wget, nc)"
    fi
else
    echo "‚ùå Container do backend n√£o est√° rodando na porta 8000"
fi

echo ""
echo "8. üîß Sugest√µes de solu√ß√£o..."
echo "============================"

if grep -qEi "(Microsoft|WSL)" /proc/version 2>/dev/null; then
    echo "üêß Detectado WSL2 - Verifica√ß√µes espec√≠ficas:"
    echo "   ‚Ä¢ Certifique-se de que o Docker Desktop est√° rodando no Windows"
    echo "   ‚Ä¢ Verifique se WSL2 integration est√° ativada no Docker Desktop"
    echo "   ‚Ä¢ Execute: sudo service docker restart"
fi

echo ""
echo "üí° Passos recomendados para resolver:"
echo "   1. Parar todos os containers: docker-compose down"
echo "   2. Limpar sistema: docker system prune -f"
echo "   3. Reconstruir: docker-compose up --build -d"
echo "   4. Verificar logs: docker-compose logs -f"
echo ""
echo "üÜò Se ainda tiver problemas:"
echo "   ‚Ä¢ Verifique o arquivo docker-compose.yml"
echo "   ‚Ä¢ Certifique-se de que n√£o h√° firewall bloqueando"
echo "   ‚Ä¢ Tente acessar: http://127.0.0.1:8000 ao inv√©s de localhost"