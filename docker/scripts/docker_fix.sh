#!/bin/bash

echo "üîß Script de Corre√ß√£o - Sistema de Containers"
echo "============================================="

# Fun√ß√£o para confirmar a√ß√£o
confirm() {
    read -p "$1 (y/n): " -n 1 -r
    echo
    [[ $REPLY =~ ^[Yy]$ ]]
}

echo "1. üõë Parando todos os containers..."
docker-compose down 2>/dev/null || true

echo ""
echo "2. üßπ Limpando sistema Docker..."
if confirm "Deseja limpar containers, imagens e volumes n√£o utilizados?"; then
    docker system prune -af
    docker volume prune -f
    echo "‚úÖ Sistema limpo!"
fi

echo ""
echo "3. üîç Verificando Docker daemon..."
if ! docker info >/dev/null 2>&1; then
    echo "‚ùå Docker daemon n√£o est√° rodando"
    
    # Tentar iniciar Docker
    if confirm "Tentar iniciar o Docker?"; then
        if command -v systemctl >/dev/null 2>&1; then
            sudo systemctl start docker
        else
            sudo service docker start
        fi
        
        sleep 3
        
        if docker info >/dev/null 2>&1; then
            echo "‚úÖ Docker iniciado com sucesso!"
        else
            echo "‚ùå Falha ao iniciar Docker. Verifique manualmente."
            exit 1
        fi
    else
        exit 1
    fi
fi

echo ""
echo "4. üîß Configura√ß√µes espec√≠ficas para WSL2..."
if grep -qEi "(Microsoft|WSL)" /proc/version 2>/dev/null; then
    echo "üêß WSL2 detectado - Aplicando corre√ß√µes..."
    
    # Verificar se o script start-docker.sh existe
    if [ -f ~/start-docker.sh ]; then
        echo "üìù Executando script de inicializa√ß√£o WSL2..."
        ~/start-docker.sh
    fi
    
    # Configurar DOCKER_HOST se necess√°rio
    if [ -z "$DOCKER_HOST" ]; then
        export DOCKER_HOST=unix:///var/run/docker.sock
        echo "export DOCKER_HOST=unix:///var/run/docker.sock" >> ~/.bashrc
        echo "‚úÖ DOCKER_HOST configurado"
    fi
fi

echo ""
echo "5. üê≥ Verificando docker-compose.yml..."
if [ ! -f "docker-compose.yml" ]; then
    echo "‚ùå docker-compose.yml n√£o encontrado!"
    echo "üí° Certifique-se de estar no diret√≥rio correto do projeto"
    exit 1
fi

# Verificar sintaxe do docker-compose.yml
if docker-compose config >/dev/null 2>&1; then
    echo "‚úÖ docker-compose.yml v√°lido"
else
    echo "‚ùå Erro na sintaxe do docker-compose.yml"
    echo "Executando diagn√≥stico:"
    docker-compose config
    exit 1
fi

echo ""
echo "6. üèóÔ∏è  Reconstruindo containers..."
echo "Isso pode levar alguns minutos..."

# Construir imagens sem cache
docker-compose build --no-cache

echo ""
echo "7. üöÄ Iniciando containers..."
docker-compose up -d

echo ""
echo "8. ‚è≥ Aguardando inicializa√ß√£o (30 segundos)..."
sleep 30

echo ""
echo "9. üìä Verificando status..."
docker-compose ps

echo ""
echo "10. üåê Testando conectividade..."

# Tentar diferentes endere√ßos
ENDPOINTS=("http://localhost:8000" "http://127.0.0.1:8000" "http://0.0.0.0:8000")

for endpoint in "${ENDPOINTS[@]}"; do
    echo "Testando $endpoint..."
    if command -v curl >/dev/null 2>&1; then
        if curl -s --max-time 5 "$endpoint" >/dev/null 2>&1; then
            echo "‚úÖ $endpoint est√° respondendo!"
        else
            echo "‚ùå $endpoint n√£o responde"
        fi
    fi
done

echo ""
echo "11. üìã Logs recentes dos servi√ßos..."
echo "=================================="
docker-compose logs --tail=10

echo ""
echo "üéØ Pr√≥ximos passos:"
echo "=================="
echo "1. Acesse: http://localhost:8000/docs"
echo "2. Se ainda n√£o funcionar, execute: ./docker_diagnostic.sh"
echo "3. Verifique logs espec√≠ficos: docker-compose logs -f [servi√ßo]"
echo ""

# Verificar portas ocupadas
echo "üîå Verificando se as portas est√£o sendo usadas:"
if command -v netstat >/dev/null 2>&1; then
    netstat -tlnp | grep -E ':(8000|5432|27017|15672)' || echo "Nenhuma porta do sistema ocupada"
elif command -v ss >/dev/null 2>&1; then
    ss -tlnp | grep -E ':(8000|5432|27017|15672)' || echo "Nenhuma porta do sistema ocupada"
fi

echo ""
echo "‚ú® Script de corre√ß√£o conclu√≠do!"
echo "Se ainda tiver problemas, execute o diagn√≥stico completo."